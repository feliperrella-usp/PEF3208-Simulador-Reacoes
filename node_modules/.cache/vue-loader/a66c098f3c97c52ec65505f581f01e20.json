{"remainingRequest":"/Users/feliperrella/Documents/Poli/PEF/PEF3208-Simulador-Reacoes/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/feliperrella/Documents/Poli/PEF/PEF3208-Simulador-Reacoes/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/feliperrella/Documents/Poli/PEF/PEF3208-Simulador-Reacoes/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/feliperrella/Documents/Poli/PEF/PEF3208-Simulador-Reacoes/src/components/Home.vue?vue&type=template&id=8dc7cce2&scoped=true&","dependencies":[{"path":"/Users/feliperrella/Documents/Poli/PEF/PEF3208-Simulador-Reacoes/src/components/Home.vue","mtime":1626394659475},{"path":"/Users/feliperrella/Documents/Poli/PEF/PEF3208-Simulador-Reacoes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/feliperrella/Documents/Poli/PEF/PEF3208-Simulador-Reacoes/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/feliperrella/Documents/Poli/PEF/PEF3208-Simulador-Reacoes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/feliperrella/Documents/Poli/PEF/PEF3208-Simulador-Reacoes/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}